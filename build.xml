<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="freeroute" default="default" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>Builds, tests, and runs the project freeroute.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="freeroute-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    <!--
        Ant contrib bootstrap
    -->
    <property name="ant-contrib.install.version" value="1.0b3" />

    <condition property="ant-contrib.home" value="${ant-contrib.ANT_CONTRIB_HOME}">
        <isset property="ant-contrib.ANT_CONTRIB_HOME" />
    </condition>

    <target name="download-ant-contrib" unless="offline">
        <mkdir dir="${ant-contrib.jar.dir}"/>
        <!-- download ant-contrib from web site so that it can be used even without any special installation -->
        <get src="http://central.maven.org/maven2/ant-contrib/ant-contrib/${ant-contrib.install.version}/ant-contrib-${ant-contrib.install.version}.jar" dest="${ant-contrib.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ant-contrib" depends="download-ant-contrib">
        <!-- try to load ant-contrib here from ant-contrib home, in case the user has not already dropped
        it into ant's lib dir (note that the latter copy will always take precedence).
        We will not fail as long as local lib dir exists (it may be empty) and
        init-ant is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ant-contrib.lib.path">
            <fileset dir="${ant-contrib.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="ant-contrib.lib.path"/>
    </target>

    <!--
        Ivy bootstrap
    -->
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME" />
    </condition>

    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
        it into ant's lib dir (note that the latter copy will always take precedence).
        We will not fail as long as local lib dir exists (it may be empty) and
        ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    
    <!--
        Fetch external libs by using ivy
    -->
    <target name="-ivy-retrieve" depends="init-ivy">
        <ivy:resolve/> <!-- Tell Ivy to resolve dependencies -->
        <ivy:retrieve/> <!-- Load dependencies to the project -->
        
        <pathconvert property="ivy.classpath.computed" dirsep="/" pathsep=":">
            <path>
                <fileset dir="lib" includes="*.jar"/>
            </path>
            <map from="${basedir}${file.separator}" to=""/>
        </pathconvert>
        
        <propertyfile file="nbproject/project.properties">
            <entry operation="=" key="ivy.classpath" value="${ivy.classpath.computed}"/>
        </propertyfile>
    </target>

    <!--
        docbook-xsl
    -->
    <available file="${docbook.xsl.dir}" property="docbook.xsl.dir.exists"/>

    <target name="docbook.xsl.dir.check">
        <condition property="docbook.xsl.dir.exists">
            <available file="${docbook.xsl.dir}" type="dir"/>
        </condition>
    </target>

    <target name="download-docbook-xsl" depends="docbook.xsl.dir.check" unless="docbook.xsl.dir.exists">
        <get src="http://search.maven.org/remotecontent?filepath=net/sf/docbook/docbook-xsl/${docbook.xsl.version}/docbook-xsl-${docbook.xsl.version}-resources.zip" dest="${docbook.xsl.file}" usetimestamp="true"/>
        <unzip src="${docbook.xsl.file}"
               dest="${docbook.xsl.base.dir}">
        </unzip>
        <delete file="${docbook.xsl.file}"/>
    </target>

    <!--
        docbook-xml
    -->
    <available file="${docbook.xml.dir}" property="docbook.xml.dir.exists"/>

    <target name="docbook.xml.dir.check">
        <condition property="docbook.xml.dir.exists">
            <available file="${docbook.xml.dir}" type="dir"/>
        </condition>
    </target>

    <target name="download-docbook-xml" depends="docbook.xml.dir.check" unless="docbook.xml.dir.exists">
        <get src="http://www.oasis-open.org/docbook/xml/${docbook.xml.version}/docbook-xml-${docbook.xml.version}.zip" dest="${docbook.xml.file}" usetimestamp="true"/>
        <unzip src="${docbook.xml.file}"
               dest="${docbook.xml.dir}">
        </unzip>
        <delete file="${docbook.xml.file}"/>
    </target>

    <!--
        xerces2-j
    -->
    <available file="${xerces2-j.jar.file}" property="xerces2-j.jar.file.exists"/>

    <target name="xerces2-j.jar.file.check">
        <condition property="docbook.jar.file.exists">
            <available file="${xerces2-j.jar.file}" type="file"/>
        </condition>
    </target>

    <target name="download-xerces2-j" depends="xerces2-j.jar.file.check" unless="xerces2-j.jar.file.exists">
        <mkdir dir="${xerces2-j.jar.dir}"/>
        <!-- download xerces2-j from web site so that it can be used even without any special installation -->
        <get src="http://central.maven.org/maven2/xerces/xercesImpl/${xerces2-j.install.version}/xercesImpl-${xerces2-j.install.version}.jar" dest="${xerces2-j.jar.file}" usetimestamp="true"/>
    </target>

    <!--
        xalan2-j
    -->
    <available file="${xalan2-j.jar.file}" property="xalan2-j.jar.file.exists"/>

    <target name="xalan2-j.jar.file.check">
        <condition property="docbook.jar.file.exists">
            <available file="${xalan2-j.jar.file}" type="file"/>
        </condition>
    </target>

    <target name="download-xalan2-j" depends="xalan2-j.jar.file.check" unless="xalan2-j.jar.file.exists">
        <mkdir dir="${xalan2-j.jar.dir}"/>
        <!-- download xalan2-j from web site so that it can be used even without any special installation -->
        <get src="http://central.maven.org/maven2/xalan/xalan/${xalan2-j.install.version}/xalan-${xalan2-j.install.version}.jar" dest="${xalan2-j.jar.file}" usetimestamp="true"/>
    </target>

    <!--
        saxon
    -->
    <available file="${saxon.jar.file}" property="saxon.jar.file.exists"/>

    <target name="saxon.jar.file.check">
        <condition property="docbook.jar.file.exists">
            <available file="${saxon.jar.file}" type="file"/>
        </condition>
    </target>

    <target name="download-saxon" depends="saxon.jar.file.check" unless="docbook.jar.file.exists">
        <mkdir dir="${saxon.jar.dir}"/>
        <!-- download saxon from web site so that it can be used even without any special installation -->
        <get src="http://central.maven.org/maven2/saxon/saxon/${saxon.install.version}/saxon-${saxon.install.version}.jar" dest="${saxon.jar.file}" usetimestamp="true"/>
    </target>

    <!--
        docbook-libs
    -->
    <target name="docbook-libs" depends="download-saxon,download-xerces2-j,download-xalan2-j"/>

    <!--
        Convert docbook XSLT to JavaHelp
    -->
    <macrodef name="xslt-saxon">
        <attribute name="in"/>
        <attribute name="out"/>
        <attribute name="style"/>
        <sequential>
            <echo level="info">XSLT Generating @{out}</echo>
            <java classname="com.icl.saxon.StyleSheet"
                  classpath="${saxon.jar.file}"
                  logError="true"
                  dir="@{out}"
                  fork="true">
                <arg value="@{in}"/>
                <arg value="@{style}"/>
            </java>
        </sequential>
    </macrodef>

    <target name="build-javahelp" depends="docbook-libs,download-docbook-xsl,download-docbook-xml,init-ant-contrib" description="JavaHelp from DocBook XML">
        <echo message="Building JavaHelp output" />
        <for param="lang" list="${languages.list}">
            <sequential>
                <delete dir="${docbook.output.dir}/@{lang}"/>
                <mkdir dir="${docbook.output.dir}/@{lang}"/>
                <echo message="JavaHelp @{lang}"/>
                <xslt-saxon in="${docbook.input.dir}/@{lang}/book.xml" style="${javahelp.stylesheet}" out="${docbook.output.dir}/@{lang}"/>
            </sequential>
        </for>
    </target>

    <!--
        JavaHelpSearch
    -->
    <target name="help" depends="init-ant-contrib,-ivy-retrieve,build-javahelp" description="JavaHelpSearch from JavaHelp">
        <for param="lang" list="${languages.list}">
            <sequential>
                <echo message="JavaHelpSearch: @{lang}"/>
                <delete dir="${docbook.output.dir}/@{lang}/JavaHelpSearch"/>
                <mkdir dir="${docbook.output.dir}/@{lang}/JavaHelpSearch"/>
                <java classname="com.sun.java.help.search.Indexer" 
                      classpath="${ivy.classpath}"
                      fork="true" failonerror="true">
                    <arg value="-locale"/>
                    <arg value="@{lang}"/>
                    <arg value="-db"/>
                    <arg value="${docbook.output.dir}/@{lang}/JavaHelpSearch"/>
                    <arg value="${docbook.output.dir}/@{lang}"/>
                </java>
            </sequential>
        </for>
    </target>        
        
    <target name="-pre-compile" depends="-ivy-retrieve,help"/>
    <target name="-pre-compile-single" depends="-ivy-retrieve,help"/>

    <target name="-post-clean">
        <delete dir="lib"/>
        <delete dir="ext"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${docbook.xml.dir}"/>
        <delete dir="${docbook.lib.dir}"/>
        <delete dir="${docbook.output.dir}"/>
        <delete dir="${docbook.xsl.dir}"/>
    </target>
</project>